{"version":3,"sources":["sound/BeepSound.wav","components/BreakLength.js","components/SessionLength.js","components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BreakLength","props","id","onClick","increaseBreak","icon","faPlus","breakLength","decreaseBreak","faMinus","SessionLength","increaseSession","sessionLength","decreaseSession","Timer","state","intervalID","timerRunning","buttonState","resetButton","bind","playButton","this","accurateInterval","timerCountdown","setState","clear","resetTimer","currentSession","timerCount","timerSeconds","faPlay","faPause","faRedo","Component","App","currentTimer","onIncreaseSessionLength","onDecreaseSessionLength","onIncreaseBreakLength","onDecreaseBreakLength","onResetTimer","updateTimerMinute","playAlarm","audioAlarm","play","pause","currentTime","preload","src","Alarm","ref","audio","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.61dbcfc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BeepSound.988833bf.wav\";","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faMinus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction BreakLength(props) {\r\n  return (\r\n    <div>\r\n      <h4 id='break-label'>Break Length</h4>\r\n      <button onClick={props.increaseBreak} id='break-increment'>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </button>\r\n      <p id='break-length'>{props.breakLength}</p>\r\n      <button onClick={props.decreaseBreak} id='break-decrement'>\r\n        <FontAwesomeIcon icon={faMinus} />\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BreakLength;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faMinus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction SessionLength(props) {\r\n  return (\r\n    <div>\r\n      <h4 id='session-label'>Session Length</h4>\r\n      <button onClick={props.increaseSession} id='session-increment'>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </button>\r\n      <p id='session-length'>{props.sessionLength}</p>\r\n      <button onClick={props.decreaseSession} id='session-decrement'>\r\n        <FontAwesomeIcon icon={faMinus} />\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SessionLength;\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlay, faPause, faRedo } from \"@fortawesome/free-solid-svg-icons\";\r\nimport accurateInterval from \"accurate-interval\";\r\n\r\nexport default class Timer extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      intervalID: 0,\r\n      timerRunning: false,\r\n      buttonState: \"Play\",\r\n    };\r\n    this.resetButton = this.resetButton.bind(this);\r\n    this.playButton = this.playButton.bind(this);\r\n  }\r\n\r\n  playButton() {\r\n    if (this.state.timerRunning === false) {\r\n      var intervalID = accurateInterval(this.props.timerCountdown, 1000);\r\n      this.setState({\r\n        intervalID: intervalID,\r\n        timerRunning: true,\r\n        buttonState: \"Pause\",\r\n      });\r\n    } else {\r\n      this.state.intervalID && this.state.intervalID.clear();\r\n      this.setState({ timerRunning: false, buttonState: \"Play\" });\r\n    }\r\n  }\r\n\r\n  resetButton() {\r\n    this.props.resetTimer();\r\n    this.setState({\r\n      buttonState: \"Play\",\r\n      timerRunning: false,\r\n    });\r\n    this.state.intervalID && this.state.intervalID.clear();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h4 id='timer-label'>{this.props.currentSession}</h4>\r\n          <span id='time-left'>\r\n            {this.props.timerCount === 0\r\n              ? \"00\"\r\n              : this.props.timerCount < 10\r\n              ? \"0\" + this.props.timerCount\r\n              : this.props.timerCount}\r\n            :\r\n            {this.props.timerSeconds === 0\r\n              ? \"00\"\r\n              : this.props.timerSeconds < 10\r\n              ? \"0\" + this.props.timerSeconds\r\n              : this.props.timerSeconds}\r\n          </span>\r\n        </div>\r\n        <div>\r\n          <button onClick={this.playButton} id='start_stop'>\r\n            <FontAwesomeIcon\r\n              icon={this.state.buttonState === \"Play\" ? faPlay : faPause}\r\n            />\r\n            {this.state.buttonState}\r\n          </button>\r\n          <button onClick={this.resetButton} id='reset'>\r\n            <FontAwesomeIcon icon={faRedo} />\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport BreakLength from \"./components/BreakLength\";\nimport SessionLength from \"./components/SessionLength\";\nimport Timer from \"./components/Timer\";\nimport Alarm from \"./sound/BeepSound.wav\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timerCount: 25,\n      timerSeconds: 0,\n      currentTimer: \"Session\",\n    };\n    this.onIncreaseSessionLength = this.onIncreaseSessionLength.bind(this);\n    this.onDecreaseSessionLength = this.onDecreaseSessionLength.bind(this);\n    this.onIncreaseBreakLength = this.onIncreaseBreakLength.bind(this);\n    this.onDecreaseBreakLength = this.onDecreaseBreakLength.bind(this);\n    this.onResetTimer = this.onResetTimer.bind(this);\n    this.updateTimerMinute = this.updateTimerMinute.bind(this);\n    this.timerCountdown = this.timerCountdown.bind(this);\n    this.playAlarm = this.playAlarm.bind(this);\n  }\n\n  onIncreaseSessionLength() {\n    if (this.state.sessionLength < 60) {\n      this.setState({\n        sessionLength: this.state.sessionLength + 1,\n        timerCount: this.state.sessionLength + 1,\n      });\n    } else {\n      return;\n    }\n  }\n  onDecreaseSessionLength() {\n    if (this.state.sessionLength > 1) {\n      this.setState({\n        sessionLength: this.state.sessionLength - 1,\n        timerCount: this.state.sessionLength - 1,\n      });\n    } else {\n      return;\n    }\n  }\n  onIncreaseBreakLength() {\n    if (this.state.breakLength < 60) {\n      this.setState({ breakLength: this.state.breakLength + 1 });\n    } else {\n      return;\n    }\n  }\n\n  onDecreaseBreakLength() {\n    if (this.state.breakLength > 1) {\n      this.setState({ breakLength: this.state.breakLength - 1 });\n    } else {\n      return;\n    }\n  }\n\n  timerCountdown() {\n    switch (this.state.timerSeconds) {\n      case 0:\n        this.setState({ timerSeconds: 59 });\n        this.updateTimerMinute();\n        break;\n      default:\n        this.setState({ timerSeconds: this.state.timerSeconds - 1 });\n        break;\n    }\n  }\n\n  updateTimerMinute() {\n    if (this.state.timerCount > 0) {\n      this.setState({ timerCount: this.state.timerCount - 1 });\n    } else {\n      this.playAlarm();\n      if (this.state.currentTimer === \"Session\") {\n        this.setState({\n          timerCount: this.state.breakLength,\n          currentTimer: \"Break\",\n          timerSeconds: 0,\n        });\n      } else {\n        this.setState({\n          timerCount: this.state.sessionLength,\n          currentTimer: \"Session\",\n          timerSeconds: 0,\n        });\n      }\n    }\n  }\n\n  playAlarm() {\n    if (this.state.timerCount === 0) {\n      this.audioAlarm.play();\n    }\n  }\n\n  onResetTimer() {\n    this.setState({\n      breakLength: 5,\n      sessionLength: 25,\n      timerCount: 25,\n      timerSeconds: 0,\n      currentTimer: \"Session\",\n    });\n    this.audioAlarm.pause();\n    this.audioAlarm.currentTime = 0;\n  }\n\n  render() {\n    return (\n      <div id='container'>\n        <h2>Pomodoro Clock</h2>\n        <BreakLength\n          breakLength={this.state.breakLength}\n          increaseBreak={this.onIncreaseBreakLength}\n          decreaseBreak={this.onDecreaseBreakLength}\n        />\n        <SessionLength\n          sessionLength={this.state.sessionLength}\n          increaseSession={this.onIncreaseSessionLength}\n          decreaseSession={this.onDecreaseSessionLength}\n        />\n        <Timer\n          timerCount={this.state.timerCount}\n          resetTimer={this.onResetTimer}\n          timerCountdown={this.timerCountdown}\n          currentSession={this.state.currentTimer}\n          timerSeconds={this.state.timerSeconds}\n        />\n        <audio\n          id='beep'\n          preload='auto'\n          src={Alarm}\n          ref={(audio) => {\n            this.audioAlarm = audio;\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}